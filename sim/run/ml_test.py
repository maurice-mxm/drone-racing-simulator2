import matplotlib.pyplot as plt
import numpy as np
import matplotlib.gridspec as gridspec
from scipy.interpolate import CubicSpline
from scipy.optimize import minimize

import uav_trajectory

"""
---------------------------------------------------------------------------------------------------------------------------------------------------
                                                                ml_test.py
                                                                ----------
                                            Test to see how good the current model is. 
---------------------------------------------------------------------------------------------------------------------------------------------------
"""



def test(env, model):
    
    f3 = plt.figure()
    ax3 = plt.axes(projection='3d')
    x_values = []
    y_values = []
    z_values = []
    ex_values = []
    ey_values = []
    ez_values = []

    t = 0
    
    fig = plt.figure(figsize=(18, 12), tight_layout=True)
    gs = gridspec.GridSpec(5, 12)
    
    ax_x = fig.add_subplot(gs[0, 0:4])
    ax_y = fig.add_subplot(gs[0, 4:8])
    ax_z = fig.add_subplot(gs[0, 8:12])
    
    ax_dx = fig.add_subplot(gs[1, 0:4])
    ax_dy = fig.add_subplot(gs[1, 4:8])
    ax_dz = fig.add_subplot(gs[1, 8:12])
    
    ax_euler_x = fig.add_subplot(gs[2, 0:4])
    ax_euler_y = fig.add_subplot(gs[2, 4:8])
    ax_euler_z = fig.add_subplot(gs[2, 8:12])
    
    ax_euler_vx = fig.add_subplot(gs[3, 0:4])
    ax_euler_vy = fig.add_subplot(gs[3, 4:8])
    ax_euler_vz = fig.add_subplot(gs[3, 8:12])
    
    ax_action0 = fig.add_subplot(gs[4, 0:3])
    ax_action1 = fig.add_subplot(gs[4, 3:6])
    ax_action2 = fig.add_subplot(gs[4, 6:9])
    ax_action3 = fig.add_subplot(gs[4, 9:12])

    max_ep_length = 250 #env.max_episode_steps
    num_rollouts = 5
    TIMESTEP = 0.1

    for n_roll in range(num_rollouts):
        pos, vel, accel, yerk, euler, ang_vel = [], [], [], [], [], []
        actions = []
        obs, done, ep_len = env.reset(), False, 0

        print(obs)

        while not (done or (ep_len >= max_ep_length)):

            act, _ = model.predict(obs, deterministic=True)
            obs, rew, done, infos = env.step(act)

            #print(rew, ep_len, act)

            ep_len += 1
            if n_roll == 0:
                x_values.append(obs[0][0])
                y_values.append(obs[0][1])
                z_values.append(obs[0][2])
                ex_values.append(obs[0][6])
                ey_values.append(obs[0][7])
                ez_values.append(obs[0][8])
                t += 1

            pos.append(obs[0, 0:3].tolist())
            vel.append(obs[0, 3:6].tolist())

            vel = np.asarray(vel)
            
            if ep_len == 1:
                accel.append((vel[-1]/TIMESTEP).tolist())
                accel = np.asarray(accel)

                yerk.append((accel[-1]/TIMESTEP).tolist())
            else:
                accel.append(((vel[-2]-vel[-1])/TIMESTEP).tolist())

                accel = np.asarray(accel)
                yerk.append(((accel[-2]-accel[-1])/TIMESTEP).tolist())

            vel = vel.tolist()
            
            accel = accel.tolist()            

            euler.append(obs[0, 6:9].tolist())
            ang_vel.append(obs[0, 9:12].tolist())

            actions.append(act[0, :].tolist())

        pos = np.asarray(pos)
        vel = np.asarray(vel)
        euler = np.asarray(euler)
        ang_vel = np.asarray(ang_vel)
        actions = np.asarray(actions)

        vels = np.empty(len(vel))
        accels = np.empty(len(vel))
        yerks = np.empty(len(vel))

        for i in range(len(vel)):
            vels[i] = np.linalg.norm(np.array([vel[i][0], vel[i][1]]))
            accels[i] = np.linalg.norm(np.array([accel[i][0], accel[i][1]]))
            yerks[i] = np.linalg.norm(np.array([yerk[i][0], yerk[i][1]]))

        print('MAX VEL: ', np.max(vels), '-- MIN VEL: ', np.min(vels))
        #print('MAX X-VEL: ', np.max(np.absolute(vel[:][0])), '-- MAX Y-VEL: ', np.max(np.absolute(vel[:][1])))
        print('MAX ACCEL: ',np.max(accels), '-- MIN ACCEL: ', np.min(accels))
        print('MAX YERK: ', np.max(yerks), '-- MIN YERK: ', np.min(yerks))        

        t = np.arange(0, pos.shape[0])
        ax_x.step(t, pos[:, 0], color="C{0}".format(
            n_roll), label="trail: {0}".format(n_roll))
        ax_y.step(t, pos[:, 1], color="C{0}".format(
            n_roll), label="trail: {0}".format(n_roll))
        ax_z.step(t, pos[:, 2], color="C{0}".format(
            n_roll), label="pos [x, y, z] -- trail: {0}".format(n_roll))
        
        ax_dx.step(t, vel[:, 0], color="C{0}".format(
            n_roll), label="trail: {0}".format(n_roll))
        ax_dy.step(t, vel[:, 1], color="C{0}".format(
            n_roll), label="trail: {0}".format(n_roll))
        ax_dz.step(t, vel[:, 2], color="C{0}".format(
            n_roll), label="vel [x, y, z] -- trail: {0}".format(n_roll))
        
        ax_euler_x.step(t, euler[:, 0], color="C{0}".format(
            n_roll), label="trail: {0}".format(n_roll))
        ax_euler_y.step(t, euler[:, 1], color="C{0}".format(
            n_roll), label="trail :{0}".format(n_roll))
        ax_euler_z.step(t, euler[:, 2], color="C{0}".format(
            n_roll), label="rpy [x, y, z] -- trail: {0}".format(n_roll))
        
        ax_euler_vx.step(t, ang_vel[:, 0], color="C{0}".format(
            n_roll), label="trail: {0}".format(n_roll))
        ax_euler_vy.step(t, ang_vel[:, 1], color="C{0}".format(
            n_roll), label="trail :{0}".format(n_roll))
        ax_euler_vz.step(t, ang_vel[:, 2], color="C{0}".format(
            n_roll), label="rpy rates [x, y, z] -- trail: {0}".format(n_roll))

        
        ax_action0.step(t, actions[:, 0], color="C{0}".format(
            n_roll), label="trail: {0}".format(n_roll))
        ax_action1.step(t, actions[:, 1], color="C{0}".format(
            n_roll), label="trail: {0}".format(n_roll))
        ax_action2.step(t, actions[:, 2], color="C{0}".format(
            n_roll), label="trail: {0}".format(n_roll))
        ax_action3.step(t, actions[:, 3], color="C{0}".format(
            n_roll), label="act [0, 1, 2, 3] -- trail: {0}".format(n_roll))
        
    ax_z.legend()
    ax_dz.legend()
    ax_euler_z.legend()
    ax_euler_vz.legend()
    ax_action3.legend()
    plt.tight_layout()

    
    values = np.array([
[-3.3043904849851438, 0.9176138335944808, 1.389895061001096] ,
[-3.304378393489287, 0.917575336551201, 1.3658030644115637] ,
[-3.3044172577988067, 0.917732964725249, 1.3421648720970925] ,
[-3.3046362822857542, 0.9185392579173299, 1.3195988733124049] ,
[-3.3052226944605985, 0.9208114275076444, 1.2998335901408027] ,
[-3.3064012626540973, 0.9258093933317532, 1.2852536960627738] ,
[-3.3084060052338247, 0.9351808236344669, 1.2779707577620747] ,
[-3.3113587153137694, 0.9504575167630587, 1.2776006883914655] ,
[-3.3151553628752937, 0.9726599229791496, 1.2816111475515202] ,
[-3.3194498174793483, 1.002176177974015, 1.2865143831783434] ,
[-3.323723525905659, 1.0391964047492908, 1.2898645707918865] ,
[-3.3273376076498673, 1.0836661160345322, 1.289875465336916] ,
[-3.329591348827865, 1.135321976028688, 1.2853492338316221] ,
[-3.329761417434807, 1.1936976819425613, 1.2755506285034555] ,
[-3.3270716549074795, 1.2582790710932499, 1.2605500418347044] ,
[-3.3207931003139977, 1.3282793162608266, 1.2405508998083443] ,
[-3.3102532185702573, 1.4027011838047496, 1.215990496440365] ,
[-3.2948918233363256, 1.48032578105242, 1.187390857450794] ,
[-3.2742215402397497, 1.5597802490407742, 1.1555760280715246] ,
[-3.24774826514175, 1.6395473099727673, 1.1220119209180788] ,
[-3.2150130682333597, 1.7179112152225753, 1.0886343006100698] ,
[-3.17575300878681, 1.7930176223306544, 1.0572089705014747] ,
[-3.1298773009509158, 1.8629988583091932, 1.029324970697079] ,
[-3.0772961238506467, 1.9259752591848605, 1.006897431212173] ,
[-3.017901995259224, 1.9801503959810602, 0.9919962892664513] ,
[-2.950583515927451, 2.022617209682433, 0.9911764465833482] ,
[-2.8756078053544525, 2.052902810394713, 1.0038050401425207] ,
[-2.7934411868826383, 2.070030540484226, 1.0322352112607924] ,
[-2.7042943415773752, 2.0731813677899678, 1.0775613989010668] ,
[-2.6081380453805765, 2.0617177739682213, 1.1398550095476] ,
[-2.5049014325258194, 2.035564287317802, 1.2173926655038707] ,
[-2.394505352023215, 1.9952144861123278, 1.3070090145020055] ,
[-2.2767063588287284, 1.9413675858180568, 1.4053960984048441] ,
[-2.1511237929914677, 1.874828677732284, 1.5095530645623376] ,
[-2.017454427109578, 1.7966376576915737, 1.616531911706908] ,
[-1.8758935882555126, 1.708383320300907, 1.7226157683807783] ,
[-1.7273625559667423, 1.612160255814856, 1.8231586183231419] ,
[-1.5729115626866519, 1.509709431512531, 1.9142425306054573] ,
[-1.4130795847310376, 1.4018295491396306, 1.9939564962278304] ,
[-1.2474566213447105, 1.288076947700244, 2.063116559677609] ,
[-1.0744685285282956, 1.1663630755370304, 2.1263950062812462] ,
[-0.8946672279841393, 1.0369282268203857, 2.1829950074099846] ,
[-0.7084819160804191, 0.900003182966243, 2.2321151080018824] ,
[-0.5163793618867485, 0.7559209298607533, 2.2727535877750853] ,
[-0.3188151623108719, 0.6050245776010224, 2.3039363241298565] ,
[-0.11655449642822593, 0.4480446023412381, 2.3240035013530695] ,
[0.089845653175429, 0.28545998673937734, 2.3319399667758773] ,
[0.2998572951682156, 0.11770545280169364, 2.3269816210834757] ,
[0.5129324932994528, -0.054755894306303315, 2.308472694037128] ,
[0.7285974914595457, -0.23154288469380088, 2.2760569433362963] ,
[0.9464373124147325, -0.4123387777316373, 2.2296545537759744] ,
[1.1661987118202208, -0.5970831386331873, 2.1699965906778056] ,
[1.3876718608938292, -0.7858622282921826, 2.0986223301226423] ,
[1.6102196954280885, -0.9780841644984719, 2.0157720572257003] ,
[1.8356501219998655, -1.179589598131559, 1.9446575199910974] ,
[2.0604698130935235, -1.3811471307478296, 1.8529879557706679] ,
[2.2844692835168843, -1.5825192867599143, 1.7412038605777416] ,
[2.5074155741022603, -1.7834230215996107, 1.6097246730402421] ,
[2.728964679597669, -1.9835019769080091, 1.4596015371259048] ,
[2.94863809183792, -2.182237097792165, 1.2922571337954971] ,
[3.1627464072311624, -2.3764327731277484, 1.1251758004841146] ,
[3.3675301750233015, -2.5614488937278157, 0.970234986020336] ,
[3.5605699342486488, -2.7335750713777864, 0.829333369490676] ,
[3.740887077643281, -2.8900060548955833, 0.7011349319830418] ,
[3.908433228291996, -3.028539093352084, 0.5834336112229465] ,
[4.063558847405479, -3.1470713801305354, 0.4745150861746029] ,
[4.206746510972198, -3.2432663249170575, 0.37345823759496244] ,
[4.338522772950751, -3.314573355875633, 0.27980532856996115] ,
[4.459691645159422, -3.359413917505763, 0.1920654714265947] ,
[4.570890233799352, -3.376854177461749, 0.10851019326973843] ,
[4.672276775122797, -3.365868198125969, 0.028145825538400615] ,
[4.763690355588445, -3.3256335905403778, -0.0495154510201441] ,
[4.844642764730843, -3.255309770274404, -0.12416503840589212] ,
[4.9145841611685785, -3.1545786788858536, -0.19512311456737222] ,
[4.9729601268271955, -3.023523947584073, -0.2611837810031544] ,
[5.01943191523992, -2.8629406425348223, -0.3209390468789946] ,
[5.05382620219993, -2.6740910832479194, -0.3725691930679475] ,
[5.0761237163215025, -2.4586570157860446, -0.41382168747798653] ,
[5.086761463603696, -2.2193662271762236, -0.4429782854523262] ,
[5.086576242876529, -1.9598311792667473, -0.4589925383283967] ,
[5.0764402476281365, -1.6838489073289742, -0.46051862031898916] ,
[5.057566450963138, -1.3959507998386542, -0.4473180564745001] ,
[5.031572654249759, -1.1012477261608862, -0.42144668333292773] ,
[4.999815201933232, -0.8043163253377613, -0.38504109114223994] ,
[4.9633038238042415, -0.5091039969580157, -0.340197030001243] ,
[4.92267868617597, -0.21895008106016717, -0.28907759213694123] ,
[4.878143567844571, 0.06324052002302205, -0.2333867486611303] ,
[4.829551503484136, 0.33492092381807576, -0.17472680719150416] ,
[4.77643739333766, 0.593822442529512, -0.11446598968855262] ,
[4.718150209730956, 0.8380887686587599, -0.054065134053283996] ,
[4.653687433748814, 1.0656958312193048, 0.006017557427884498] ,
[4.58190614590676, 1.2747094332326194, 0.0656828045275806] ,
[4.501691307952021, 1.4635089530585677, 0.1248942977935069] ,
[4.4119582552580106, 1.6306650747591456, 0.18392069884616266] ,
[4.311818289804128, 1.7751506839514355, 0.2431403252670729] ,
[4.2006473950269, 1.8963531542932754, 0.3030940639312648] ,
[4.0785035442710775, 1.994759400446685, 0.36371867528490726] ,
[3.9460660658913547, 2.071854600046314, 0.4243542803468296] ,
[3.799983340116876, 2.1215352294571823, 0.4944201205879769] ,
[3.641296729838065, 2.1452617105903284, 0.5739314399186832] ,
[3.4715724594918376, 2.1449826608723805, 0.6621842208972897] ,
[3.2923834204432967, 2.12225180889686, 0.7591556411185514] ,
[3.1052831334084625, 2.0782932115783264, 0.8657083018589187] ,
[2.9116940884117457, 2.0138043552402065, 0.9841240245258597] ,
[2.717470374270812, 1.9444308740609075, 1.0877469406194593] ,
[2.520613343047925, 1.8586821180179653, 1.203475091256739] ,
[2.322755909554169, 1.75964868664242, 1.3293077442470835] ,
[2.125078369313731, 1.6503108680909548, 1.4630158442842596] ,
[1.9284502289234022, 1.533782125213088, 1.6006494857909872] ,
[1.7334087982155375, 1.4127972699743958, 1.7373001364181737] ,
[1.540138572521995, 1.2895189025046392, 1.8671456031354763] ,
[1.3484649765221222, 1.165382083711488, 1.9840633051521392] ,
[1.157807871181962, 1.0413176566371356, 2.080447238523902] ,
[0.9692147941463904, 0.9168322661283961, 2.1670590170373405] ,
[0.7826934371692239, 0.792129146398757, 2.2432480523835534] ,
[0.5980820889765393, 0.6672635887816095, 2.307759065433449] ,
[0.4151106212585657, 0.5421965977027736, 2.3591232428596536] ,
[0.2334656217564875, 0.41687287778146337, 2.395791162704715] ,
[0.05285443843128815, 0.291202063313496, 2.4168722482400677] ,
[-0.12699738876003527, 0.165012796704763, 2.422506964791964] ,
[-0.306391236325407, 0.03809620718090531, 2.4132210365008664] ,
[-0.4856785624800391, -0.08982149876152218, 2.3900671246530245] ,
[-0.6653201242777914, -0.2191412464957694, 2.354975020210603] ,
[-0.8458351724787854, -0.35023110674549596, 2.309770059270434] ,
[-1.0275986871113754, -0.48315910141424656, 2.2549247852578405] ,
[-1.2110520248879535, -0.6179809744562903, 2.1915558336266883] ,
[-1.3966244055931738, -0.7546206257240698, 2.1208601350794973] ,
[-1.584662389971153, -0.8928106546444284, 2.0438995904329946] ,
[-1.7776070345342943, -1.033332935280689, 1.9728984604303048] ,
[-1.9705682612702105, -1.1736366424917923, 1.8815904317286318] ,
[-2.163568341346516, -1.3136504573314087, 1.7704380294770594] ,
[-2.356886787557394, -1.4533207152574137, 1.6418050510449642] ,
[-2.5509618625826933, -1.5925123200138847, 1.4993177677476388] ,
[-2.746303736193976, -1.7309072984808915, 1.3474670265164068] ,
[-2.9431679590348363, -1.8679760126814478, 1.1895185279325522] ,
[-3.141480119201524, -2.003103477471945, 1.0268538543020136] ,
[-3.3432351572642096, -2.133732527302446, 0.8805002285050129] ,
[-3.547229928370838, -2.258704690953407, 0.7499033350494471] ,
[-3.751484115421351, -2.3769632936640512, 0.6319889104237482] ,
[-3.9537675373817667, -2.4870226672930547, 0.5247053887965292] ,
[-4.151599518827359, -2.58605363510403, 0.4297124359593213] ,
[-4.342805091280022, -2.671205557545001, 0.34677411910964895] ,
[-4.5256376615800535, -2.7396177184231516, 0.2752449309724929] ,
[-4.698551614733, -2.7882959677904036, 0.21496781410638285] ,
[-4.86001451351169, -2.81414801744534, 0.16629242243321277] ,
[-5.00891412301035, -2.8150678658681043, 0.12846292770522233] ,
[-5.144102327548392, -2.7892556869582674, 0.10095929569035117] ,
[-5.264522876849525, -2.7356859188073757, 0.08295058817745536] ,
[-5.368966743576276, -2.6537488222451704, 0.07382841407590617] ,
[-5.456223368479598, -2.543546154213719, 0.07286515993025319] ,
[-5.525471094433276, -2.4064053682318534, 0.07863464856572763] ,
[-5.576436956505759, -2.2448272416779247, 0.08907830563439442] ,
[-5.608932522202709, -2.0615392478275747, 0.10257111892611352] ,
[-5.621848158210809, -1.8583802648535697, 0.11940835918798177] ,
[-5.614467547486827, -1.6379493426204226, 0.1397440600752298] ,
[-5.5863609565331815, -1.4033289844761077, 0.16380298025426637] ,
[-5.537913554655811, -1.15826267083788, 0.1911736167258868] ,
[-5.470096851724637, -0.9066635921234896, 0.22114823152664836] ,
[-5.384020043539751, -0.6522420038936341, 0.2533144992695015] ,
[-5.281180304930641, -0.39850488974770887, 0.2871383983793594] ,
[-5.163409164974947, -0.1486035060752855, 0.3219420243421249] ,
[-5.03302437160141, 0.094866432588841, 0.35649756117466835] ,
[-4.8921288999552965, 0.3296721274892076, 0.3901872070588908] ,
[-4.742655135561678, 0.5537124154785835, 0.42307636106455054] ,
[-4.586461637418019, 0.7648087669822549, 0.45593701111618107] ,
[-4.425469239269896, 0.960862818036726, 0.48970825784689276] ,
[-4.26163295261617, 1.140027540473997, 0.5251123608946664] ,
[-4.096826945984733, 1.3010198158786737, 0.5622176800830984] ,
[-3.9326319093350572, 1.442733234166532, 0.6011596934415262] ,
[-3.7702853428258063, 1.5641990946444957, 0.6422155943955228] ,
[-3.6106373682933124, 1.664617013610027, 0.6858115839505587] ,
[-3.454236141391478, 1.742201417133201, 0.7341171266414658] ,
[-3.301178109979906, 1.7955584217523806, 0.7893811816813319] ,
[-3.151091347143694, 1.8240411366516467, 0.8537330627494293] ,
[-3.003235550338104, 1.8284663405384423, 0.9283396133353201] ,
[-2.856824858553378, 1.8132793082468353, 1.0097232411951909] ,
[-2.711550211866904, 1.7859184510863426, 1.0889757458812843] ,
[-2.567871517970413, 1.7415881281039407, 1.181469204470058] ,
[-2.425653515882599, 1.6835646721076334, 1.2859435424149153] ,
[-2.28439907224545, 1.6143704562603318, 1.4012380557863473] ,
[-2.143215818546354, 1.5361868873117297, 1.5254899035990082] ,
[-2.0009601249863906, 1.451045500243897, 1.6556461320274367] ,
[-1.8565750530101286, 1.3609321741934048, 1.7870574127773793] ,
[-1.7094258802389277, 1.2675715138807437, 1.914379249545009] ,
[-1.5596255097065939, 1.1723853813851177, 2.0314710610148614] ,
[-1.4078931331373468, 1.0763221682518667, 2.1325716067648015] ,
[-1.2535494470650623, 0.9792975258684711, 2.218519799921645] ,
[-1.0942324148067193, 0.8804509377034307, 2.2952593643870074] ,
[-0.9298695339641432, 0.7797150299770891, 2.3615734720567385] ,
[-0.7604301661891502, 0.6769057323222836, 2.4164812359187535] ,
[-0.5858157417353576, 0.571675708076268, 2.4594390429110358] ,
[-0.40589079454581634, 0.46351135096278384, 2.490258495017793] ,
[-0.2206311607185094, 0.3518085859337679, 2.508801874772853] ,
[-0.030074733160287748, 0.23586481507178275, 2.515080675946617] ,
[0.16544350843454453, 0.11508753412521285, 2.5088673674179933] ,
[0.36534927071317336, -0.010956419678918736, 2.4897953619529933] ,
[0.5689274399808188, -0.14253574184135648, 2.4574638168172176] ,
[0.7754299237064982, -0.279815783573089, 2.411610627436766] ,
[0.9840842135770996, -0.422828039965843, 2.3520502594754538] ,
[1.1941064112385762, -0.5714284420999431, 2.27860199764844] ,
[1.4048023724755705, -0.7256513098661932, 2.19173207446489] ,
[1.6154390231988502, -0.8854194685958515, 2.0920937437943676] ,
[1.8252026183425818, -1.0554530460443352, 1.9907413716387798] ,
[2.0338061421180553, -1.2269452510999133, 1.87044325209406] ,
[2.2408702121658353, -1.3996309130076043, 1.7317360827428363] ,
[2.4456404309474182, -1.57359661300147, 1.5769427762664032] ,
[2.6466915976520378, -1.7489302122611659, 1.4104442788908869] ,
[2.8424095630553525, -1.9249909626034445, 1.2361276963854433] ,
[3.0317407452649374, -2.1004598554560663, 1.0553145107500537] ,
[3.2094200711828615, -2.2729085505759263, 0.8811138237932916] ,
[3.3701900863009255, -2.4378349168671742, 0.7240166961703368] ,
[3.5137410712196675, -2.591805305541267, 0.582838639807911] ,
[3.6406120950063854, -2.7317030923191887, 0.4561541965923749] ,
[3.752097269029261, -2.8547997845298085, 0.3423111051875451] ,
[3.8499632484175668, -2.958608975219015, 0.23976929576235156] ,
[3.935893260100578, -3.040184724854514, 0.14811732461793836] ,
[4.011891833441917, -3.0975085560880062, 0.06554514656908886] ,
[4.079661386538612, -3.129412743598168, -0.010468047809058051] ,
[4.140195094700296, -3.1346495157163226, -0.08162276091577787] ,
[4.193950276041624, -3.1119954062991213, -0.14888346500188632] ,
[4.241071154491516, -3.0605542712456626, -0.21272020706848815] ,
[4.2813896151628565, -2.979333786983167, -0.27264889828224137] ,
[4.314748644694991, -2.8680943063151063, -0.3280003458329307] ,
[4.3410988449749786, -2.7274231322168316, -0.3779643751029484] ,
[4.360412733663238, -2.558204458593611, -0.4210361459784272] ,
[4.372729779545342, -2.361616566091251, -0.45496534562228397] ,
[4.378418379710481, -2.1400182893344604, -0.4779493020153412] ,
[4.378119548148686, -1.8967532423015003, -0.4887335260461707] ,
[4.372526016568558, -1.6354305410604986, -0.4857247401192111] ,
[4.36254720158071, -1.3606172735322026, -0.4686600225785732] ,
[4.3492002428110546, -1.077451276072483, -0.4391386700219667] ,
[4.333308359558943, -0.7906833587071399, -0.3993824903591131] ,
[4.315371630784685, -0.5043616968610121, -0.3516012788689047] ,
[4.295517088363009, -0.2218930276043557, -0.2977495283245732] ,
[4.273485710039918, 0.053746986294140264, -0.23933317492090853] ,
[4.248661918267668, 0.3198816202682895, -0.1776882949669267] ,
[4.220094897765571, 0.5740335498871226, -0.11393339883356716] ,
[4.186554310029474, 0.8138909115796642, -0.0490076866315553] ,
[4.146579680218273, 1.0371679475839986, 0.016682061358968908] ,
[4.098698825951345, 1.241823092427251, 0.08279392888866709] ,
[4.041498086502529, 1.4260203744826294, 0.14917310371851406] ,
[3.9737399487530625, 1.5882808991792028, 0.21575874594390926] ,
[3.894257044597344, 1.7272049726820116, 0.28300891254301985] ,
[3.802050721957914, 1.841607764833739, 0.35179627239928773] ,
[3.696920180138898, 1.9315065668142999, 0.4223208199731797] ,
[3.579197859710071, 1.9976044132437487, 0.49463381990182587] ,
[3.449536385144871, 2.040888341829844, 0.5689774115021273] ,
[3.3044943950057055, 2.0549697666776634, 0.6555542894650752] ,
[3.1453285459180176, 2.0416391166553503, 0.7548530723483886] ,
[2.972840801463352, 2.00188188046504, 0.8688785725114663]
])
    x_values = np.asarray(values[:,0])
    y_values = np.asarray(values[:,1])
    z_values = np.asarray(values[:,2])


    gates = np.array([[2.0, 2.0, 2.0, -1.0], [-2.0, -2.0, 2.0, -1.0], [-5.0, -4.0, 1.0, -1.0], [-5.0, 4.0, 1.0, 1.0], [-2.0, 2.0, 2.0, 1.0], [2.0, -2.0, 2.0, 1.0], [5.0, -4.0, 1.0, 1.0], [5.0, 4.0, 1.0, -1.0]])
    ax3.plot3D(x_values, y_values, z_values, 'blue')
    ax3.scatter3D(gates[:,0], gates[:,1], gates[:,2])
    ax3.set_title('Path of first drone.')
    plt.show()
    """
    waypoints = np.array([[2, 0], [3, 1], [2, 2], [-1, 3], [-3, 1], [-1, 0], [2, 0], [3, 1], [2, 2], [-1, 3], [-3, 1], [-1, 0], [2, 0], [3, 1], [2, 2], [-1, 3], [-3, 1], [-1, 0], [2, 0], [3, 1], [2, 2], [-1, 3], [-3, 1], [-1, 0],])

    # Number of waypoints
    num_waypoints = len(waypoints)

    # Initial guess for the times at each waypoint
    initial_times = np.linspace(0, 10, num_waypoints)

    # Define the constraints
    max_speed = 3.1  # units per second
    max_acceleration = 4.1  # units per second^2
    max_jerk = 100.0  # units per second^3

    # Function to calculate the spline and its derivatives
    def get_splines_and_derivatives(times):
        tck_x = CubicSpline(times, waypoints[:, 0])
        tck_y = CubicSpline(times, waypoints[:, 1])
        return tck_x, tck_y

    # Define the objective function (total time)
    def objective(times):
        return times[-1]  # Minimize the final time

    # Define the constraints function
    def constraints(times):
        cons = []
        
        # Ensure the times are strictly increasing
        epsilon = 1e-3
        for i in range(1, len(times)):
            cons.append(times[i] - times[i - 1] - epsilon)
        
        tck_x, tck_y = get_splines_and_derivatives(times)
        
        # Speed constraints
        for t in np.linspace(times[0], times[-1], num=len(times)*10):
            dx_dt = tck_x(t, 1)
            dy_dt = tck_y(t, 1)
            speed = np.sqrt(dx_dt**2 + dy_dt**2)
            cons.append(max_speed - speed)
        
        # Acceleration constraints
        for t in np.linspace(times[0], times[-1], num=len(times)*10):
            dx_dt = tck_x(t, 1)
            dy_dt = tck_y(t, 1)
            d2x_dt2 = tck_x(t, 2)
            d2y_dt2 = tck_y(t, 2)
            acceleration = np.sqrt(d2x_dt2**2 + d2y_dt2**2)
            cons.append(max_acceleration - acceleration)
        
        # Jerk constraints
        for t in np.linspace(times[0], times[-1], num=len(times)*10):
            d2x_dt2 = tck_x(t, 2)
            d2y_dt2 = tck_y(t, 2)
            d3x_dt3 = tck_x(t, 3)
            d3y_dt3 = tck_y(t, 3)
            jerk = np.sqrt(d3x_dt3**2 + d3y_dt3**2)
            cons.append(max_jerk - jerk)
        
        return np.array(cons)

    # Set up the constraints dictionary for the optimizer
    constraints_dict = {
        'type': 'ineq',
        'fun': constraints
    }

    # Set up bounds for the times (ensuring they are positive and increasing)
    bounds = [(0, None) for _ in range(num_waypoints)]

    # Run the optimizer
    result = minimize(
        objective,
        initial_times,
        constraints=constraints_dict,
        bounds=bounds,
        method='SLSQP',
        options={'disp': True}
    )

    # Optimized times
    optimal_times = result.x

    # Get the optimized splines
    tck_x_opt, tck_y_opt = get_splines_and_derivatives(optimal_times)

    # Generate the optimized path
    t_new = np.linspace(optimal_times[0], optimal_times[-1], num=num_waypoints*100)
    x_opt = tck_x_opt(t_new)
    y_opt = tck_y_opt(t_new)
    z_opt = np.asarray(np.ones(len(x_opt)))


   
    x_values = np.asarray(x_values[:])#np.asarray(x_values[250:])
    y_values = np.asarray(y_values[:])#np.asarray(y_values[250:])
    z_values = np.asarray(np.ones(len(x_values)))#np.asarray(z_values[250:])#np.asarray(np.ones(len(x_values)))


    #ax2.scatter3D(x_values, y_values, z_values, color='blue', label='Path of first drone')
    
    # Plot orientation using quivers
    for i in range(0, len(x_values), 2):
        x, y, z = x_values[i], y_values[i], z_values[i]
        roll, pitch, yaw = ex_values[i], ey_values[i], ez_values[i]
        # Convert Euler angles to rotation matrix
        R = np.array([
            [np.cos(yaw)*np.cos(pitch), np.cos(yaw)*np.sin(pitch)*np.sin(roll) - np.sin(yaw)*np.cos(roll), np.cos(yaw)*np.sin(pitch)*np.cos(roll) + np.sin(yaw)*np.sin(roll)],
            [np.sin(yaw)*np.cos(pitch), np.sin(yaw)*np.sin(pitch)*np.sin(roll) + np.cos(yaw)*np.cos(roll), np.sin(yaw)*np.sin(pitch)*np.cos(roll) - np.cos(yaw)*np.sin(roll)],
            [-np.sin(pitch), np.cos(pitch)*np.sin(roll), np.cos(pitch)*np.cos(roll)]
        ])
        # Direction vector (orientation) in local frame
        direction = np.dot(R, np.array([1, 0, 0]))
        # Plot quiver
        #ax2.quiver(x, y, z, direction[0], direction[1], direction[2], length=0.2, normalize=True, color='gray', alpha=0.5)

    #ax2.set_title('Path of first drone')
    #ax2.legend()
    #ax2.set_xlabel('X')
    #ax2.set_ylabel('Y')
    #ax2.set_zlabel('Z')

    t_values = np.linspace(np.min(t), np.max(t + 1)/50, 2000)#np.linspace(250/50 + np.min(t), np.max(t + 1)/50, 750)

    #print(t_values)

    print(len(t_values), len(x_values))
    #print(x_values)
    

    spline_x = CubicSpline(t_values, x_values)
    spline_y = CubicSpline(t_values, y_values)
    spline_z = CubicSpline(t_values, z_values)

    x_new = spline_x(t_values)
    y_new = spline_y(t_values)
    z_new = spline_z(t_values)

    #print(x_new)

    ax3.plot3D(x_new, y_new, z_new, color='blue', label='Spline')

    t_values = np.linspace(0, 6.215, 250)


    traj = uav_trajectory.Trajectory()
    traj.loadcsv("traj5.csv")

    evals = np.empty((len(t_values), 15))

    for t, i in zip(t_values, range(0, len(t_values))):
        e = traj.eval(t)
        evals[i, 0:3]  = e.pos
        evals[i, 3:6]  = e.vel
        evals[i, 6:9]  = e.acc
        evals[i, 9:12] = e.omega
        evals[i, 12]   = e.yaw
        evals[i, 13]   = e.roll
        evals[i, 14]   = e.pitch

    
    #ax3.plot3D(evals[:,0], evals[:,1], evals[:,2], color='red', label='optm')
    ax3.plot3D(x_opt, y_opt, z_opt, color='red', label='optm')

    """
    #plt.show()


